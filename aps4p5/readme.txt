3 September 2013

This is the APS code used in Daniel et al (arXiv:1205.2708), which we will 
hereafter refer to as reference [1].  Please cite that reference in any 
published work resulting from this code.

To compile the code, edit the compilers and libraries in the Make file and type

make aps4p5

This will produce the executable aps4p5 which can be run using the command

./aps4p5 param_file.sav

To delete the executable and all of its associated object files, type

make clean

We present here the code with both the cartoon likelihood function from section
4 of reference [1].  This code is contained in the class udder_likelihood in the
files likelihoodinterface.cpp and likelihoodinterface.h  The parameter file
params_udder.sav runs this version of the code.

We also present the WMAP7 likelihood interface, represented by the class
wmap_likelihood and the additional files wmap_wrapper.F90 and
camb_wmap_wrapper.F90 (note that this wrapper was written for the April 2011
version of CAMB, and may require some re-writing to interface with more modern
versions of CAMB).  The parameter file params_CMB.sav runs this version of the
code.

If you do not want to compile with CAMB, simply remove the two -D_WMAP7_ flags
from the compiler definitions in the Makefile.

To write your own likelihood function, you must write a new class that inherits
from the class likelihood_function in the file likelihoodinterface.h. 
You must declare a new instance of that likelihood function in aps_interface.cpp
and pass it to the constructor
likelihood(int,double*,double*,covariance_function*,likelihood_function*).  See
how the pointer lk is handled in aps_interface.cpp for an example.

Below, we will list all of the outputs produced by APS.

We will then list the source code files contained in this software package and 
briefly describe the contents of each.  Consult the individual files for more 
detailed comments.

----------OUTPUTS---------------

There are three main output files generated by APS.

The principal output file, whose name is specified with the #outputfile keyword
in the parameter file, contains a list of sampled points, their chisquared
values, and a flag (ling) indicating whether or not they were found using
gradient descent (ling==1 if they were).  In order that APS be able to resume
interuppted searches, the order of these columns should not be changed.

The timing file (name specified by the #timingfile keyword in the parameter
file; default is `timingfile.sav') contains information about the performance of
APS.  It lists:

the name of the principal output file
the number of points that have been sampled
the number of active gradient wanderers
the number of `good' points found by gradient descent
the number of times chisquared was improved by gradient descent
the amount of wall time spent on the Gaussian process per sampled point
the number of times the Gaussian process was used (in `usual' sampling)
the amount of wall time spent on the likelihood function per sampled point
the number of times the likelihood function was called (in `usual' sampling)
the amount of wall time spent on gradient descent per sampled point
the number of times gradient descent was used
the number of nearest neighbors used per Gaussian process
the number of random samples used in the `usual' APS
the value of the KD-tree diagnostic (1 means all is well)
the minimum found value of chisquared
the target value of chisquared
the number of gradient wanderers that have been deleted

If you specify the keyword #mufitfile in the parameter file, it will create a
file that compares the prediction of the Gaussian process to the true value of
chisquared.  The columns of this file are

the index of the point
its predicted value of mu
its true value of chisquared
the normalized difference (mu-chisquared)/chisquared 

-----------SOURCE CODE----------
-------------------------
aps_interface.cpp

This is the code that is actually called by the executable ./aps4p5.
It reads in the specified parameter file, creates the necessary class objects,
and manages the sampling of points in parameter space.

See params_udder.sav for an commented example of how to interface with this
file.

params_CMB.sav will also call this software, using the cartoon udder likeliood 
function.


-------------------------
-------------------------
likelihoodinterface.h and likelihoodinterface.h

These contain most of the guts of APS.

The class likelihood ties together both the Gaussian process (see
gaussian_process.cpp) and the likelihood function (represented by the functor
class likelihood_function).  This class also handles all of the searching
through the functions sample_pts (which performs the ``usual'' APS search of
steps 1A-3A in section 2 of reference [1]) and grad_sample() which performace
the gradient descent search.

The class grad_wanderer provides a way to store and organize the locations of
the different gradient descent searches.

-------------------------
-------------------------
gaussian_process.h and gaussian_process.cpp

These contain the class gp which stores the data for APS and performs the
Gaussian process interpolation.  The also contain the functors for different
covariograms.  Currently, the code supports the neural network covariogram
(equation 4.29 of Rasmussen and Williams 2006) and the Gaussian covariogram
(equation 4.9 of Rasmussen and Williams 2006).

To incorporate a new covariogram, one must write a class which inherits from the
class covariance_function.  The covariogram is passed to gp by way of the
likelihood class.  This is handled in aps_interface.cpp (see how the pointer cv
is used).

-------------------------
-------------------------
kd.h and kd.cpp

These contain the class kd_tree which stores the data used by gaussian_process
as a KD-tree.  this software also performs the nearest neighbor search.

-------------------------
-------------------------
eigen_wrapper.h and eigen_wrapper.cpp

These files contain linear algebra routines wrapped from LAPACK and BLAS to a
C++ interface.  Principally, 

invert_lapack(double **matin, double **min, int el, int verb) 

takes the el-by-el symmetric matrix **matin (the input matrix), inverts it, 
and stores the invers in **min. verb is just a verbosity flag.

-------------------------
-------------------------
goto_tools.h and goto_tools.o

These contain generally useful subroutines to sort lists, generate random 
numbers, etc.

-------------------------


--------------------------General notes------------------

Throughout the code you will see references to "nodes" and "node"-based
subroutines.  This corresponds to a feature that did not perform well and has
been disabled.  These routines should not be called.

If you have an problems or questions please feel free to 
email scottvalscott@gmail.com

If this code results in published results, please cite arXiv:1205.2708
